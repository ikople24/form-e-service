import { useState } from "react";
import Swal from "sweetalert2";
import {
  Copy,
  Construction,
  TreePine,
  Speaker,
  Users,
  FilePlus,
  Shovel,
} from "lucide-react";

import html2pdf from "html2pdf.js";

export default function RequestForm() {
  const [formData, setFormData] = useState({
    type: "",
    fullname: "",
    address: "",
    phone: "",
    signature: "",
  });

  const [showForm, setShowForm] = useState(false);
  const [selectedType, setSelectedType] = useState("");

  const handleChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  const handleTypeSelect = (type) => {
    setSelectedType(type);
    setFormData((prev) => ({ ...prev, type }));
    setShowForm(true);
  };

  const generatePDF = (data) => {
    const today = new Date();
    const formattedDate = today.toLocaleDateString("th-TH", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });

    const template = `
      <div style="padding: 40px; font-family: Arial; font-size: 14px;">
        <h1 style="color: purple; margin-bottom: 4px;">‡πÄ‡∏ó‡∏®‡∏ö‡∏≤‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ï‡∏≤‡∏Ñ‡∏•‡∏µ</h1>
        <h2 style="text-align: center; margin-bottom: 4px;">${data.type}</h2>
        <p style="text-align: right; margin-bottom: 4px;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formattedDate}</p>
        <p style="margin-bottom: 4px;">‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${data.type}</p>
        <p style="margin-bottom: 4px;">‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ‡∏ô‡∏≤‡∏¢‡∏Å‡πÄ‡∏ó‡∏®‡∏°‡∏ô‡∏ï‡∏£‡∏µ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ï‡∏≤‡∏Ñ‡∏•‡∏µ</p>
        <p style="margin-bottom: 6px;">‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤: ${data.fullname}</p>
        <p style="margin-bottom: 4px;">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${data.address}</p>
        <p style="margin-bottom: 4px;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${data.signature}</p>
        <p style="margin-bottom: 4px;">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${data.phone}</p>
        <br/><br/>
        <p style="text-align: right; margin-bottom: 4px;">‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ ______________________</p>
      </div>
    `;

    html2pdf()
      .from(template)
      .set({
        margin: 1,
        filename: "‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á.pdf",
        html2canvas: { scale: 2 },
        jsPDF: { orientation: "portrait" },
      })
      .save();
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const fields = ["fullname", "address", "phone", "signature"];
    for (const field of fields) {
      if (!formData[field]) {
        const fieldLabels = {
          fullname: "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•",
          address: "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
          phone: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£",
          signature: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
        };
        await Swal.fire({
          icon: "warning",
          title: `‡∏ó‡πà‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö (${fieldLabels[field]})`,
          confirmButtonColor: "#f59e0b",
        });
        document.querySelector(`[name="${field}"]`).focus();
        return;
      }
    }

    try {
      const res = await fetch("https://form-e-service-production.up.railway.app/api/request", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      const result = await res.json();
      if (res.ok) {
        const message = `
üì¢ <b>‡∏°‡∏µ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</b>
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${formData.type}
‡∏ä‡∏∑‡πà‡∏≠: ${formData.fullname}
‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${formData.address}
‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${formData.phone}
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${formData.signature}`;
        await sendTelegram(message);

        await Swal.fire({
          icon: "success",
          title: "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          customClass: {
            confirmButton:
              "bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded",
          },
        });
        generatePDF(formData);
        setFormData({ type: "", fullname: "", address: "", phone: "", signature: "" });
        setShowForm(false);
        setSelectedType("");
      } else {
        await Swal.fire({
          icon: "error",
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          text: result.error || "‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
          confirmButtonColor: "#d33",
        });
      }
    } catch (err) {
      console.error(err);
      await Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ server ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        text: err.message,
        confirmButtonColor: "#d33",
      });
    }
  };

  const sendTelegram = async (message) => {
    const TOKEN = "7842874628:AAFncDibUG7Y6FBg_s3AEJrRBcYriKTyR_8";
    const CHAT_ID = "-1002529162161";
    const url = `https://api.telegram.org/bot${TOKEN}/sendMessage`;

    await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ chat_id: CHAT_ID, text: message, parse_mode: "HTML" }),
    });
  };

  const types = [
    { type: "‡∏Ñ‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏ô‡∏≤", icon: <Copy className="w-8 h-8" /> },
    { type: "‡∏Ç‡∏≠‡∏Ç‡∏∏‡∏î‡∏î‡∏¥‡∏ô", icon: <Shovel className="w-8 h-8" /> },
    { type: "‡∏Ç‡∏≠‡∏ñ‡∏°‡∏î‡∏¥‡∏ô", icon: <FilePlus className="w-8 h-8" /> },
    { type: "‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á", icon: <Construction className="w-8 h-8" /> },
    { type: "‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏õ‡∏û‡∏£", icon: <Users className="w-8 h-8" /> },
    { type: "‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á", icon: <Speaker className="w-8 h-8" /> },
    { type: "‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏±‡∏î‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ", icon: <TreePine className="w-8 h-8" /> },
  ];

  return (
    <div> {/* UI rendering omitted for brevity */} </div>
  );
}
